.TH CLOUDVPN 1 "Jan 2009" Unix "CloudVPN Unix Manual"
.SH NAME
cloudvpn \- secure mesh networking VPN
.SH SYNOPSIS
.B cloudvpn
[\fIOPTIONS\fR] ...

.SH DESCRIPTION
CloudVPN is a secure VPN that allows mesh-networking connection of all nodes of the network.

It connects to the operating system's virtual ethernet interface (usually TUN
or TAP) and routes the incoming packets among other connected nodes, using
optimized distance vector routing algorithm (or, optionally, a multipath
modification of that).

This allows network users to communicate as they were on single ethernet
network, forgetting the real underlying network topology and subnet problems.

CloudVPN is mesh-networking, therefore is allowed to be massively
decentralized, and doesn't really need a star-like clients-server connection
topology. In fact, it has been successfully tested to route things in
any-shaped graph of nodes (even with circles). Routing of packets happens
directly through the best-pinging connection to the destination, no
spanning-tree-like computations are used.

Connection between nodes are encrypted and authenticated using SSL, see
.I SECURITY
section for more details.

.SH RUNNING
CloudVPN doesn't run as daemon - it starts in foreground and prints the log to
stdout. Please use your OS tools to run it as a daemon, or check the
.I cloudctl
script, which should be supplied in the package.

CloudVPN tries to gracefully exit when hit with SIGTERM or SIGINTR.

If CloudVPN terminates because of error or misconfiguration, it returns a non-zero exit status, and usually logs some information about what went wrong.

On successful start, only virtual ethernet is created, users got no IP
adresses. Therefore please be sure to assign them manually, or run some
DHCP/radvd daemon on one of the nodes.

.SH OPTIONS
CloudVPN accepts options in two ways - either command line, or from config
files. Both options use the same method of associating values to keys.

Config file is written line-by-line using this syntax:

.B option-name <whitespace> value <newline>
.br
.B #<comment>

Note that comment-line has to be
.I started
with the `#' character, not with whitespace, nor any text option.

Command line options are the same as those from config file, only use this
syntax:

.B cloudvpn -option value -option value ...

Note that when you are supplying whitespace-containing options, you must
force your shell not to split them, like in this real example:

.B cloudvpn -connect 'allyourbase.arebelongto.us 15135'

There's no default-read config file, so there's a special option for processing a file:

.B cloudvpn -@include /etc/cloudvpn.conf

This can be used in config files in the same way:

.B @include /etc/cloudvpn-keys.conf

.SH OPTION LIST
Please note that time values are measured in microseconds.
.TP
.B @include
Includes specified file
.TP
.B connect HOST PORT
Establishes a connection to given hostname/port (which are separated by space).
Repeat as needed. Host names, IPv4 and IPv6 addresses can be specified.
.TP
.B conn_retry 10000000
Connection retry in usec.
.TP
.B listen IP PORT
Binds a socket to giver IP and PORT to listen for incoming connections. Repeat
as needed.
.TP
.B ca
Loads all CA certificates from specified PEM file and adds them to authentication chain. Repeat as needed.
.TP
.B crl
Loads all CRLs from specified PEM file, and adds them to the certificate
verification mechanism. Repeat as needed.
.TP
.B key, cert, key_pass
These 3 options load specified SSL private key, SSL public certificate, and
optionally set the key-unlocking password. Those options must be specified for
CloudVPN to start.
.TP
.B dh
Load Diffie-Hellman connection parameters from given file.
.TP
.B iface yes
Boolean option to activate local TUN/TAP connections. Without this, CloudVPN
can run in "headless" mode, not exposing the virtual network to local
interfaces.
.TP
.B mac
Override the autogenerated interface MAC address. Useful when avoiding
collisions.
.TP
.B tunctl /dev/net/tun
Linux-specific, tells what tuntap control interface to use.
.TP
.B iface_dev tap0
Linux-specific, tells what TAP interface to open.
.TP
.B iface_persist yes
Linux-specific, sets the tuntap interface to be persistent (so it doesn't close
when CloudVPN dies).
.TP
.B iface_device file
BSD-specific, sets which tun device to open. Usually `tap0' on FreeBSD, or
`tun0' on OpenBSD. You should create this device before, for example with using
`ifconfig tap0 create', and (specifically on OpenBSD, as it doesn't have `tap')
set the tun interface to act as TAP, using `ifconfig tun0 link0'.
.TP
.B user, group
CloudVPN is, because of tun/tap configuration, sometimes needed to start with
root privileges. This allows to switch to some low privileged user/group.
.TP
.B chroot
Chroots CloudVPN after successful setup.
.TP
.B mlockall yes
Calls mlockall(2) to avoid swapping out sensitive SSL-key data.
.TP
.B multipath yes
Enables the multipath packet scattering. Please be sure _not_ to enable this
for all nodes of the network, it's not really usuable on nodes which do real
routing.
.TP
.B multi_ratio 2
Tunes the threshold of the multipath classes of above routing. See source for
details.
.TP
.B uplimit-total, uplimit-conn, uplimit-burst, downlimit-total, downlimit-conn, downlimit-burst
Sets the bandwidth limits for upload/download in bytes per second, resp. bytes.
It's strongly suggested not to lower the burst rates below defaults (which are
2048 for upload and 20480 for download). Also note that we are limiting the
inner data bandwidth. Real bandwidth is usually a little higher, because of
CloudVPN protocol messages and SSL compression.
.TP
.B tcp_nodelay yes
Sets TCP_NODELAY option for all connections. See tcp(7).
.TP
.B ip_tos
Sets IP_TOS accordingly to ip(7). Possible values are lowdelay, throughput,
reliability and mincost.
.TP
.B promisc yes
Enable promiscuous mode on the interface. (write _all_ routed packets to the
TUN interface)
.TP
.B ignore_macs yes
Specifically avoid MAC collisions, usuable when bridging networks.
.TP
.B broadcast_send yes
Send all packets as broadcasts, usuable when bridging networks.
.TP
.B bridge_mode yes
Selects all bridging options (promisc, ignore_macs, broadcast_send).
.TP
.B broadcast_nocopy yes
Do not really broadcast the broadcast packets. This is usuable ONLY when you
are low on upload bandwidth and bridging network between two nodes via multiple
connections, most probably using multipath scattering. On these conditions it
gives you some traffic benefits, otherwise totally cripples any network
functionality.
.TP
.B status-file /some/file
Periodically export some nonimportant data to a file. Can be displayed on a web
or so.
.TP
.B status-interval 30000000, status-verbose yes
Select how verbosely and how often is the status file regenerated.

.SH TUNING OPTIONS
Those options are best at default, you will probably need them only when
scaling CloudVPN to large/smaller networks, or tuning some specific
functionality. Most of them is self-explanatory.

.TP
.B br_id_cache_size 1024
How many broadcast IDs to remember. Increase when broadcasts are killing your network.

.TP
.B route_max_dist 64
.TP
.B max_remote_routes 256
.TP
.B max_waiting_proto_packets 64
.TP
.B max_waiting_data_packets 256
.TP
.B max_input_queue_size 4194304
.TP
.B conn-mtu 8192
.TP
.B heartbeat 50000
.TP
.B listen_backlog 32
.TP
.B max_connections 1024
.TP
.B conn_timeout 60000000
.TP
.B conn_keepalive 5000000
.TP
.B comm_close_timeout 10000000
.TP
.B report_ping_changes_above 5000
.TP
.B ssl_method tls
.TP
.B broadcast_filter_allow 0806
Filter out broadcast packets, allow only specified EtherIDs. Repeat as needed.
If none is specified, all EtherIDs are allowed.

.SH SECURITY
The connection is secured by OpenSSL protocol and encryption. Users with valid
certificates (signed by the CA) are considered authenticated to connect and
communicate. Please note that owner of CA key is basically the network
administrator, and decides which users can connect to network. Multiple CAs or
CA trees are allowed in the same network. Also, no real CRL-spreading scheme is
included in CloudVPN, so it relies only on your effort.

.SH EXAMPLES
CloudVPN is usually run like this:

.B cloudvpn -@include /etc/cloudvpn/1.conf

Configuration files can be made executable, using proper #!. This is an example config:

#!/usr/bin/cloudvpn -@include
.br
key /etc/cloudvpn/ssl.key
.br
cert /etc/cloudvpn/ssl.crt
.br
ca /etc/cloudvpn/ca.crt
.br
dh /etc/cloudvpn/dh.pem
.br
iface yes
.br
listen 0.0.0.0 15135
.br
listen :: 15136
.br
connect vpn.somecompany.org 15135
.br
connect vpn.ipv6.someone.com 15136
.br
status-file /var/www/vpn-status.txt


.SH AUTHORS
Mirek Kratochvil <exa.exa@gmail.com>
.br
.I http://exa.czweb.org/

.SH BUGS
Routing will probably die when you change the virtual interface MAC address
without restarting CloudVPN, for example with `ifconfig tap0 hw ether ...'.
This will be fixed soon.

If you find some more, report to authors as fast as you can.
.SH "SEE ALSO"
.BR openssl(1)
.BR ifconfig(1)
.BR ip(7)
.BR tcp(7)
.BR route(8)

.SH LICENSE
This is free software, distributed under the GNU GPLv3 license.
